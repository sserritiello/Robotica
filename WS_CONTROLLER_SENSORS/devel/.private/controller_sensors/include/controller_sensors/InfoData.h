// Generated by gencpp from file controller_sensors/InfoData.msg
// DO NOT EDIT!


#ifndef CONTROLLER_SENSORS_MESSAGE_INFODATA_H
#define CONTROLLER_SENSORS_MESSAGE_INFODATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_sensors
{
template <class ContainerAllocator>
struct InfoData_
{
  typedef InfoData_<ContainerAllocator> Type;

  InfoData_()
    : s1(0)
    , s2(0)
    , s3(0)
    , s4(0)
    , s5(0)
    , s6(0)  {
    }
  InfoData_(const ContainerAllocator& _alloc)
    : s1(0)
    , s2(0)
    , s3(0)
    , s4(0)
    , s5(0)
    , s6(0)  {
  (void)_alloc;
    }



   typedef int16_t _s1_type;
  _s1_type s1;

   typedef int16_t _s2_type;
  _s2_type s2;

   typedef int16_t _s3_type;
  _s3_type s3;

   typedef int16_t _s4_type;
  _s4_type s4;

   typedef int16_t _s5_type;
  _s5_type s5;

   typedef int16_t _s6_type;
  _s6_type s6;





  typedef boost::shared_ptr< ::controller_sensors::InfoData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_sensors::InfoData_<ContainerAllocator> const> ConstPtr;

}; // struct InfoData_

typedef ::controller_sensors::InfoData_<std::allocator<void> > InfoData;

typedef boost::shared_ptr< ::controller_sensors::InfoData > InfoDataPtr;
typedef boost::shared_ptr< ::controller_sensors::InfoData const> InfoDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_sensors::InfoData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_sensors::InfoData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller_sensors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'controller_sensors': ['/home/mivia/EserciziRobotica/Robotica/WS_CONTROLLER_SENSORS/src/controller_sensors/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller_sensors::InfoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_sensors::InfoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_sensors::InfoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_sensors::InfoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_sensors::InfoData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_sensors::InfoData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_sensors::InfoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c64a8554d5def718c90f33d1c09b0758";
  }

  static const char* value(const ::controller_sensors::InfoData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc64a8554d5def718ULL;
  static const uint64_t static_value2 = 0xc90f33d1c09b0758ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_sensors::InfoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_sensors/InfoData";
  }

  static const char* value(const ::controller_sensors::InfoData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_sensors::InfoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 s1\n\
int16 s2\n\
int16 s3\n\
int16 s4\n\
int16 s5\n\
int16 s6\n\
";
  }

  static const char* value(const ::controller_sensors::InfoData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_sensors::InfoData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s1);
      stream.next(m.s2);
      stream.next(m.s3);
      stream.next(m.s4);
      stream.next(m.s5);
      stream.next(m.s6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InfoData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_sensors::InfoData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_sensors::InfoData_<ContainerAllocator>& v)
  {
    s << indent << "s1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s1);
    s << indent << "s2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s2);
    s << indent << "s3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s3);
    s << indent << "s4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s4);
    s << indent << "s5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s5);
    s << indent << "s6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_SENSORS_MESSAGE_INFODATA_H
